//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V2021.2 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : register_model
// Unit            : spi_reg_pkg
// File            : spi_reg_pkg.sv
//----------------------------------------------------------------------
// Created by      : penghuachen
// Creation Date   : 10/6/24 4:37 PM
//----------------------------------------------------------------------
// Title           : register_model
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// spi_reg_pkg
//----------------------------------------------------------------------
package spi_reg_pkg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: bending_reg
   // 
   // PMD901 bending
   //--------------------------------------------------------------------

   class bending_reg extends uvm_reg;
      `uvm_object_utils(bending_reg)

      uvm_reg_field reserved; 
      rand uvm_reg_field bending_reg; 


      // Function: coverage
      // 
      covergroup cg_vals;
         bending_reg	 : coverpoint bending_reg.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "bending_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         reserved = uvm_reg_field::type_id::create("reserved");
         bending_reg = uvm_reg_field::type_id::create("bending_reg");

         reserved.configure(this, 15, 1, "RO", 0, 15'b000000000000000, 1, 0, 0);
         bending_reg.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: fan_reg
   // 
   // 1 - close to overheat
   //--------------------------------------------------------------------

   class fan_reg extends uvm_reg;
      `uvm_object_utils(fan_reg)

      uvm_reg_field reserved; 
      uvm_reg_field close2overheat; 


      // Function: coverage
      // 
      covergroup cg_vals;
         close2overheat	 : coverpoint close2overheat.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "fan_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         reserved = uvm_reg_field::type_id::create("reserved");
         close2overheat = uvm_reg_field::type_id::create("close2overheat");

         reserved.configure(this, 15, 1, "RO", 0, 15'b000000000000000, 1, 0, 0);
         close2overheat.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: fault_reg
   // 
   // 1 - motor error
   //--------------------------------------------------------------------

   class fault_reg extends uvm_reg;
      `uvm_object_utils(fault_reg)

      uvm_reg_field reserved; 
      uvm_reg_field motor_error; 


      // Function: coverage
      // 
      covergroup cg_vals;
         motor_error	 : coverpoint motor_error.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "fault_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         reserved = uvm_reg_field::type_id::create("reserved");
         motor_error = uvm_reg_field::type_id::create("motor_error");

         reserved.configure(this, 15, 1, "RO", 0, 15'b000000000000000, 1, 0, 0);
         motor_error.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: motor_speed_reg
   // 
   // Motor speed
   //--------------------------------------------------------------------

   class motor_speed_reg extends uvm_reg;
      `uvm_object_utils(motor_speed_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "motor_speed_reg");
         super.new(name, 16, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 16, 0, "RW", 1, 16'h0100, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: park_reg
   // 
   // PMD901 park
   //--------------------------------------------------------------------

   class park_reg extends uvm_reg;
      `uvm_object_utils(park_reg)

      uvm_reg_field reserved; 
      rand uvm_reg_field enable; 


      // Function: coverage
      // 
      covergroup cg_vals;
         enable	 : coverpoint enable.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "park_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         reserved = uvm_reg_field::type_id::create("reserved");
         enable = uvm_reg_field::type_id::create("enable");

         reserved.configure(this, 15, 1, "RO", 0, 15'b000000000000000, 1, 0, 0);
         enable.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ready_reg
   // 
   // 1 - overheat
   //--------------------------------------------------------------------

   class ready_reg extends uvm_reg;
      `uvm_object_utils(ready_reg)

      uvm_reg_field reserved; 
      uvm_reg_field overheat; 


      // Function: coverage
      // 
      covergroup cg_vals;
         overheat	 : coverpoint overheat.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ready_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         reserved = uvm_reg_field::type_id::create("reserved");
         overheat = uvm_reg_field::type_id::create("overheat");

         reserved.configure(this, 15, 1, "RO", 0, 15'b000000000000000, 1, 0, 0);
         overheat.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: spi_reg_block
   // 
   //--------------------------------------------------------------------

   class spi_reg_block extends uvm_reg_block;
      `uvm_object_utils(spi_reg_block)

      rand motor_speed_reg motor_speed; // Motor speed
      rand park_reg park; // PMD901 park
      rand bending_reg bending; // PMD901 bending
      rand fan_reg fan; // 1 - close to overheat
      rand fault_reg fault; // 1 - motor error
      rand ready_reg ready; // 1 - overheat

      uvm_reg_map spi_reg_block_map; 


      // Function: new
      // 
      function new(string name = "spi_reg_block");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         motor_speed = motor_speed_reg::type_id::create("motor_speed");
         motor_speed.configure(this);
         motor_speed.build();

         park = park_reg::type_id::create("park");
         park.configure(this);
         park.build();

         bending = bending_reg::type_id::create("bending");
         bending.configure(this);
         bending.build();

         fan = fan_reg::type_id::create("fan");
         fan.configure(this);
         fan.build();

         fault = fault_reg::type_id::create("fault");
         fault.configure(this);
         fault.build();

         ready = ready_reg::type_id::create("ready");
         ready.configure(this);
         ready.build();

         spi_reg_block_map = create_map("spi_reg_block_map", 'h0, 2, UVM_LITTLE_ENDIAN, 1);
         default_map = spi_reg_block_map;

         spi_reg_block_map.add_reg(motor_speed, 'h0, "RW");
         spi_reg_block_map.add_reg(park, 'h2, "RW");
         spi_reg_block_map.add_reg(bending, 'h4, "RW");
         spi_reg_block_map.add_reg(fan, 'h6, "RW");
         spi_reg_block_map.add_reg(fault, 'h8, "RW");
         spi_reg_block_map.add_reg(ready, 'ha, "RW");

         lock_model();
      endfunction
   endclass


endpackage
